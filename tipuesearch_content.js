var tipuesearch = {"pages":[{"title":"Github Page和Pelican搭建个人博客,并使用主题Elegant","text":"前言 什么是 Github Pages , Pelican 和 elegant ? Github pages允许你存放你的静态博客, Pelican是基于Python的, 能让你迅速创建博客骨架, elegant是一款Pelican主题. 效果预览 最近想搭建个博客网站写一些东西，最终选择了在Github上写博客, 今天刚把博客搭建完, 写一下搭建的过程还有遇到的一些问题和解决方法． 个人环境: Ubuntu 18.04, Python3.6 一. 创建Github Pages 这一步很简单, 在Github上新建个repository, name可以写作username.github.io, 比如我的是huangjiarong.github.io, 然后公开创建就可以了.参考官方网站 Github Pages 二. 安装Pelican 使用虚拟环境, 这里我用的virtualenvwrapper mkvirtualenv pelican 安装Pelican, 使用Markdown写文章的话还得安装Markdown pip install pelican pip install markdown 三. 使用Pelican 新建目录 myBlog , 然后进入目录快速创建博客 mkdir myBlog cd myBlog pelican - quickstart 执行完 pelican-quickstart 后, 会提示你输入一些博客的配置, 大多数可直接回车选择默认, 后续这些配置都可以在 pelicanconf.py 文件中修改. 执行完后的目录是这样的: blog / ├── content # 存放文章内容 ├── Makefile ├── output # 存放静态页面 ├── pelicanconf . py # 配置文件 ├── publishconf . py # 发布时的配置 └── tasks . py 接下来在 content 目录下写个 blog.md 文件,内容如下: Title : My First Blog Date : 2019 - 01 - 01 Category : Blog Slug : first My first blog . 保存,然后执行 make html 进入 output 文件夹就可以看到pelican为我们生成的html静态文件, 执行 make serve 就可以在本地 127.0.0.1:8000 查看效果, 不过默认主题不好看, 后续将会采用elegant主题, 现在先修改一下配置文件, 因为我想修改一下文章的保存路径还有url, 不然的话当文章一多的话看起来 output 文件夹会很乱, 而且不好管理. 在 pelicanconf.py 文件加入以下变量: ARTICLE_PATHS = [ 'blog' ] ARTICLE_SAVE_AS = 'blog/{date:%Y_%m_%d}/{slug}.html' ARTICLE_URL = 'blog/{date:%y_%m_%d}/{slug}.html' 然后在 content 目录下新建 blog 目录, 以后文章写在 blog 目录下, 执行 make html 后生成的文章主页将在 output/blog 文件夹下, 按日期进行分类. url也将随之改变为 blog/2019_01_01/first.html , 当然前提是以后在md文件中写上Date和Slug元信息. 每次写文章都得 make html 然后 make serve 查看效果, Pelican官方文档 提供了另一种方法 make devserver 可以将两个命令结合起来, 这样每次修改文章后保存直接刷新浏览器就能查看效果了. 四. 使用Elegant主题 Pelican默认的主题不好看, 这里我使用了Elegant主题. 在github上下载主题, 在这里我把主题放到了 myBlog 目录下, 也就是 content 的同级目录 git clone --recursive https://github.com/getpelican/pelican-themes 下载完后在 pelicanconf.py 添加 THEME = 'pelican-themes/elegant' 然后 make html , make serve 就能查看主题效果了, 这里还得配置一些主题的功能. 4.1 增加Contents 效果是该篇博客最左边的Contents这样, 参考 elegant官方文档 , 首先我们需要下载一些插件, 可以从github上获取, 这里我将插件放在 myBlog 目录下, 和 content , pelican-themes 等目录同级, 在 myBlog 目录使用以下命令: git clone --recursive https://github.com/getpelican/pelican-plugins 然后在 pelicanconf.py 加入: PLUGIN_PATHS = [ \"pelican-plugins\" ] PLUGINS = [ 'extract_toc' , ] 然后在.md文件中使用 [TOC] 就可以了. Title : My First Blog Date : 2019 - 01 - 01 Category : Blog Slug : first [ TOC ] ### My first blog . 4.2 增加文章底部上一篇下一篇功能 参考 elegant官方文档 , 插件我们都下载了, 在修改 pelicanconf.py 的PLUGINS就行了 PLUGINS = [ 'extract_toc' , 'neighbors' , ] 4.3 全局搜索功能 参考 elegant官方文档 , 修改pelicanconf.py PLUGINS = [ 'extract_toc' , 'neighbors' , 'tipue_search' ] DIRECT_TEMPLATES = [ 'index' , 'authors' , 'categories' , 'tags' , 'archives' , 'search' ] 在这里我遇到了点问题, 首先是 DIRECT_TEMPLATES 要像我写的那样, 不然你只写了search的话, 你修改了md文件里的信息后执行完 make html , 你会发现 output 里的 index.html , tags 之类的都没更新, 也就是说这些文件都不会执行更新, 因为你没写进 DIRECT_TEMPLATES 里. 其次是搜索功能是依赖于google api的jquery的, 谷歌嘛在国内意味着得科学上网, 所以要用搜索功能的话我的方法是网上下载一份2.0版本的 jquery.min.js 文件, 然后放到 pelican-themes/elegant/static/tipuesearch 目录下, 然后修改 pelican-themes/elegant/templates/search.html 文件, 将里面链接到googleapi的jquery文件地址修改到我们下载的jquery文件地址: <script src= \" {{ SITEURL }} /theme/tipuesearch/jquery.min.js\" ></script> 这样搜索功能就完成了. 五. 上传到Github pages 进入 output 文件夹, 依次执行 git init git add . git remote add origin https : // github . com / your_username / your_username . github . io git pull origin master git commit - m 'first blog' git push origin master 进入 https://your_username.github.io 就能看到你的博客了.","tags":"Pelican","url":"/blog/2019_09_04/create-blog.html"}]};